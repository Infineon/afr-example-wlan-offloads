# To build, run the following commands in current directory:
# cmake -DVENDOR=cypress -DBOARD=CY8CPROTO_062_4343W -DCOMPILER=arm-gcc -S . -B build -G Ninja -DCMAKE_TOOLCHAIN_FILE=../../../tools/cmake/toolchains/arm-gcc.cmake
# cmake --build build

cmake_minimum_required(VERSION 3.13)

# Configure compiler assembler for code outside amazon-freertos source tree
enable_language(C)
enable_language(ASM)

set(afr_app_name "afr-example-wlan-offloads")

set(AFR_PATH "${CMAKE_SOURCE_DIR}/../../..")
set(CMAKE_TRY_COMPILE_TARGET_TYPE "STATIC_LIBRARY")
project(${afr_app_name})

# Define CUSTOM_DESIGN_MODUS to pick the custom design.modus configuration.
# Comment this to pick the default BSP design files.
option(CUSTOM_DESIGN_MODUS "Use custom design configuration.")

add_definitions(-DCY_RETARGET_IO_CONVERT_LF_TO_CRLF)

# Convert from "_" to "-" in the target board name in order
# to be compatible with GNU Make based approach.
if (DEFINED CUSTOM_DESIGN_MODUS)
    string(REPLACE "_" "-" APP_BOARD_NAME "${BOARD}")
endif()

################################################################################
# Apply LPA patch.
################################################################################
# Check if the patch can be cleanly applied
execute_process(COMMAND git apply --check vendors/cypress/MTB/libraries/lpa/target/COMPONENT_AFR/afrchanges.patch
                RESULT_VARIABLE return_code
                ERROR_QUIET
                WORKING_DIRECTORY ${AFR_PATH})

# Apply the patch only if it can be cleanly applied.
if (NOT ${return_code})
    message(STATUS "Applying LPA patch...")
    execute_process(COMMAND git apply vendors/cypress/MTB/libraries/lpa/target/COMPONENT_AFR/afrchanges.patch
                    RESULT_VARIABLE return_code
                    ERROR_QUIET
                    WORKING_DIRECTORY ${AFR_PATH})
endif()
###############################################################################

# Path to this application directory
get_filename_component(CY_APP_DIR "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)

set(AFR_BOARD "${VENDOR}.${BOARD}" CACHE INTERNAL "")
set(AFR_TOOLCHAIN "${COMPILER}" CACHE INTERNAL "")

# Print the target board name
message(STATUS "TARGET=" ${APP_BOARD_NAME})

# Configure include for freertos config files, aws config files, and cypress psoc6_core header files before add_subdirectory
set(BOARD_DEMO_DIR "${AFR_PATH}/vendors/cypress/boards/${BOARD}/aws_demos")
set(BOARD_CY_CODE_DIR "${BOARD_DEMO_DIR}/application_code/cy_code")
set(CY_APP_DESIGN_MODUS_DIR "${CY_APP_DIR}/COMPONENT_CUSTOM_DESIGN_MODUS/TARGET_${APP_BOARD_NAME}/GeneratedSource" )
set(additional_include_dirs "${AFR_PATH}/demos/include"
                            "${AFR_PATH}/libraries/c_sdk/standard/mqtt/include"
                            "${CMAKE_SOURCE_DIR}/config_files")

if (DEFINED CUSTOM_DESIGN_MODUS)
    list(APPEND additional_include_dirs "${CY_APP_DESIGN_MODUS_DIR}")
else()
    list(APPEND additional_include_dirs "${BOARD_CY_CODE_DIR}/GeneratedSource")
endif()

if (EXISTS "${BOARD_CY_CODE_DIR}/SDIO_HOST")
    list(APPEND additional_include_dirs "${BOARD_CY_CODE_DIR}/SDIO_HOST")
endif()

set(CY_INCLUDE_DIRS ${additional_include_dirs} CACHE INTERNAL "")

# build amazon-freertos as library
set(LIB_MODE 1)

# build amazon-freertos
add_subdirectory(${AFR_PATH} "${AFR_PATH}/build")

# add executable target source files
add_executable(${afr_app_name} "${CMAKE_SOURCE_DIR}/main.c"
                               "${CMAKE_SOURCE_DIR}/wlan_offload.c")

include("${AFR_PATH}/vendors/cypress/MTB/psoc6/cmake/cy_defines.cmake")
include("${AFR_PATH}/vendors/cypress/MTB/psoc6/cmake/cy_create_exe_target.cmake")

# Add board specific files (taken from amazon-freertos/vendors/cypress/boards/${BOARD}/aws_demos/application_code/cy_code).
# Customize as neccessary or replace with another cypress board.
# The code in ${BSP_DIR}/GeneratedSource is generated by the Configurator tools while saving ${BSP_DIR}/design.modus.
# Exclude the BSP design.modus when CUSTOM_DESIGN_MODUS is defined.
cy_find_files(exe_glob_files DIRECTORY "${BOARD_CY_CODE_DIR}")
if (DEFINED CUSTOM_DESIGN_MODUS)
    foreach(item ${exe_glob_files})
        if(${item} MATCHES "GeneratedSource")
            list(REMOVE_ITEM exe_glob_files ${item})
        endif(${item} MATCHES "GeneratedSource")
    endforeach()
endif()
cy_get_src(exe_source_files ITEMS "${exe_glob_files}")
target_sources(${afr_app_name} PUBLIC "${exe_source_files}")

set(CY_LPA_LIB_DIR "${AFR_PATH}/vendors/cypress/MTB/libraries/lpa" )
set(CY_LIB_UTIL_DIR "${AFR_PATH}/vendors/cypress/MTB/libraries/connectivity-utilities" )

# Application sources
file(GLOB_RECURSE CY_APP_EXTRA_SOURCES
    "${CY_LPA_LIB_DIR}/source/*.c"
    "${CY_LPA_LIB_DIR}/target/COMPONENT_AFR/*.c"
    "${CY_LPA_LIB_DIR}/helpers/net_activity/COMPONENT_AFR/*.c"
    "${CY_LIB_UTIL_DIR}/cy_string/*.c"
    "${CY_LIB_UTIL_DIR}/network/COMPONENT_AFR/*.c"
    "${CY_LPA_LIB_DIR}/*.h"
if (DEFINED CUSTOM_DESIGN_MODUS)
    "${CY_APP_DESIGN_MODUS_DIR}/*.c"
    "${CY_APP_DESIGN_MODUS_DIR}/*.h"
endif()
    )

target_sources(${afr_app_name} PUBLIC "${CY_APP_EXTRA_SOURCES}" )

# Additional include dirs
target_include_directories(${afr_app_name} PUBLIC
                         "${CY_LPA_LIB_DIR}/source"
                         "${CY_LPA_LIB_DIR}/target"
                         "${CY_LPA_LIB_DIR}/target/COMPONENT_AFR"
                         "${CY_LPA_LIB_DIR}/helpers/net_activity"
                         "${CY_LPA_LIB_DIR}/helpers/net_activity/COMPONENT_AFR"
                         "${CY_LPA_LIB_DIR}/include"
                         "${CY_LIB_UTIL_DIR}"
                         "${CY_LIB_UTIL_DIR}/network"
                         "${CY_LIB_UTIL_DIR}/cy_string"
                         )

# add linker script and map file generation
cy_add_linker_options(EXE_APP_NAME ${afr_app_name})

# Set up dependent linked libraries
target_link_libraries(${afr_app_name}  PUBLIC
    AFR::common
    AFR::utils
    AFR::wifi
    AFR::wifi::mcu_port
    psoc6_core # Pulls in defines, includes, source code for psoc6 devices
)

